<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title><![CDATA[À moi la garde !]]></title>
        <description><![CDATA[]]></description>
        <link>http://pbuyle.github.io</link>
        <atom:link href="http://pbuyle.github.io/feed.xml" rel="self" type="application/rss+xml" />
                        <item>
            <title>Behat step-definition to verify visibility (not just presence) of Drupal form elements.</title>
            <description>&lt;p&gt;In November 2013, I tried Drupal &lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD&lt;/a&gt; using
&lt;a href=&quot;http://behat.org/&quot;&gt;Behat&lt;/a&gt; and the &lt;a href=&quot;https://drupal.org/project/drupalextension&quot;&gt;Behat Drupal extension&lt;/a&gt;. The experiment
was to apply BDD in order to implement a small feature on an existing site. After a informal discussion about the
feature, the stakeholder wanting it wrote the Cucumber scenarios. As the developer of the feature, I took the
scenarios and started by running them against my test site. And so, my BDD journey started.&lt;/p&gt;

&lt;p&gt;The first thing that needed fixing was the scenario itself, off course being the first scenario ever written by its
author, most of the step, while understandable by an human being did not match the pattern expected by Behat (actually
the (Mink)[http://mink.behat.org/] and Drupal extensions). While fixing the steps, I quickly learned that steps to easily
express the visibility of Drupal form element did not exists. So I wrote a couple or steps to check for the
(in)visibility of form element identified by their labels. Writing the steps was the occasion to dig the Behat and Mink
APIs. Most of them requires a (Mink driver)[http://mink.behat.org/#different-browsers-drivers] with support for CSS in
order for the visibility tests on the form element to work. The Goutte driver does not, the Selenium driver does not. I
don&#039;t known for others.&lt;/p&gt;

&lt;p&gt;The code for these steps is distributed under a MIT-style licence as Gist (embed below). In
(issue 2151935)[https://drupal.org/node/2151935] Another Behat/Drupal enthusiast requested for them to be included . This
would require a bit more work as they currently heavily rely on, what I think is, the default Drupal form markup and have
only been tested in single custom theme. Because we can expect everyone to use default form markup, the code to retrieve
a form element or its label should abstracted to easily overwriteable methods. One of these methods should be used to
retrieve the form labels on the page. Once you have a form label element, you can retrieve its form element using its
&lt;code&gt;for&lt;/code&gt; attribute (requiring this attribute is a reasonable requirements). Another method should be used to retrieve the
type (ie. the Drupal form API &lt;code&gt;#type&lt;/code&gt;) of a form element.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/pbuyle/7698675.js&quot;&gt;&lt;/script&gt;
</description>
            <pubDate>Thu, 24 Apr 2014 00:00:00 -0400</pubDate>
            <link>http://pbuyle.github.io/blog/2014/04/24/behat-steps-definition-to-verify-visibility-of-Drupal-form-elements</link>
            <guid isPermaLink="true">http://pbuyle.github.io/blog/2014/04/24/behat-steps-definition-to-verify-visibility-of-Drupal-form-elements</guid>
                                    <category domain="http://pbuyle.github.io/blog/tags">>drupal</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>behat</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>drupal-7</category>
                    </item>
                                                <item>
            <title>JavaScript ♥ Drupal</title>
            <description>&lt;p&gt;On October 26th, at the the &lt;a href=&quot;http://www.drupalcampmontreal.com/&quot;&gt;Drupal Camp Montréal&lt;/a&gt;, I made a presentation on the
usage of JavaScript in the context of a Drupal site. I think the presentation went fine, and it seems a few people in
the audience enjoyed and, more importantly, learned something out of it.&lt;/p&gt;

&lt;p&gt;The presentation is the result of all the feedbacks I got on the first public version of my previous post, originally
written internally at &lt;a href=&quot;http://pheromone.ca&quot;&gt;Phéromone&lt;/a&gt; and then &lt;a href=&quot;https://coderwall.com/p/kd-4cg&quot;&gt;shared on corderwall&lt;/a&gt;.
Since all the developers working with Drupal who read it told nme they learned something from it, I figured way too much
developers don&#039;t known about what I think are the basics of working with JavaScript in Drupal.&lt;/p&gt;

&lt;p&gt;The slides for this presentation are, since a few weeks, available online at &lt;a href=&quot;http://pbuyle.github.io/dcmtl-javascript&quot;&gt;http://pbuyle.github.io/dcmtl-javascript&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Sun, 24 Nov 2013 00:00:00 -0500</pubDate>
            <link>http://pbuyle.github.io/blog/2013/11/24/javascript-drupal-drupalcamp-montreal</link>
            <guid isPermaLink="true">http://pbuyle.github.io/blog/2013/11/24/javascript-drupal-drupalcamp-montreal</guid>
                                    <category domain="http://pbuyle.github.io/blog/tags">>drupal</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>drupal-7</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>javascript</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>jquery</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>drupalcamp</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>presentation</category>
                    </item>
                                <item>
            <title>JavaScript, jQuery and DOM Ready in Drupal 7</title>
            <description>&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: JavaScript code to process elements on page load on a Drupal 7 site should looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;(function($) {
  Drupal.behaviors.doSomething = {
    attach: function(context, settings) {
      $(&#039;div.something&#039;, context).once(&#039;do-something&#039;).doSomething({
        param1: settings.somethingl.param,
        param2: &#039;something else&#039;
      });
    }
  }
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Drupal 7 provides jQuery in the &lt;a href=&quot;http://api.jquery.com/jQuery.noConflict/&quot;&gt;no-conflict mode&lt;/a&gt;, which means that &lt;code&gt;$&lt;/code&gt; is
not the jQuery object/namespace. This should not be an issue with properly written jQuery plugins that follow
&lt;a href=&quot;http://learn.jquery.com/plugins/basic-plugin-creation/#protecting-the-alias-and-adding-scope&quot;&gt;jQuery&#039;s plugins authoring documentation&lt;/a&gt;.
This is however an issue for code snippets mindlessly copy/pasted from random web pages. Most of them expect &lt;code&gt;$&lt;/code&gt; to be
the jQuery namespace and will not work within a Drupal page. This can be easily solved by wrapping theses snippets in
immediately invoked anonymous function that will alias the jQuery namespace to &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;(function($) {
    // Here $ is the jQuery namespace.
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually, JavaScript code that needs to run at page load, is also wrapped in a function passed as argument to &lt;code&gt;jQuery()&lt;/code&gt;
or &lt;code&gt;jQuery(document).ready()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$(function() {
  // Code here is executed when the DOM is loaded.
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When combined, these two patterns are perfectly fine, even within Drupal. However if content (ie. new DOM elements) is
added to the page after page load (AJAX calls, content generated from JavaScript, etc.) the code in such functions will
never be able to process the added elements. Or if some portion of the content is removed or moved across the page, the
code will have no option to unregistered event handlers or update information about the already processed elements.
Drupal provides an API for this called &lt;a href=&quot;https://drupal.org/node/304258#drupal-behaviors&quot;&gt;behaviors&lt;/a&gt;. Using behavior is
not required, but strongly recommended as a best practice to avoid future headaches (when code written six months ago
starts behaving strangely when a contrib module is added to the project). A behavior is written like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;Drupal.behaviors.behaviorName = {
  attach: function (context, settings) {
    // Do something.
  },
  detach: function (context, settings, trigger) {
    // Undo something.
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;attach&lt;/code&gt; function of all registered behaviors (all properties of the &lt;code&gt;Drupal.behaviors&lt;/code&gt; object) will be invoked
when behavior should be added to elements, either when the DOM is ready (ie. page load) and when elements are added to
the DOM. The &lt;code&gt;detach&lt;/code&gt; function will be called when behaviors should be detached from elements: just before elements
are removed from the DOM, moved in the DOM or a form is submitted. The &lt;code&gt;context&lt;/code&gt; parameter will always be a parent of
the added elements, the single added/removed/moved/submitted element itself or the whole &lt;code&gt;document&lt;/code&gt; element. The
&lt;code&gt;settings&lt;/code&gt; parameters will be the settings for the &lt;code&gt;context&lt;/code&gt;, usually the &lt;code&gt;Drupal.settings&lt;/code&gt; object as set by calls
to &lt;a href=&quot;http://api.drupal.org/api/drupal/includes!common.inc/function/drupal_add_js/7&quot;&gt;&lt;code&gt;drupal_add_js()&lt;/code&gt;&lt;/a&gt; from PHP. For
&lt;code&gt;detach&lt;/code&gt;, the &lt;code&gt;trigger&lt;/code&gt; parameter will contains the kind of event that triggered the call: &lt;code&gt;&#039;unload&#039;&lt;/code&gt; (elements
removed), &lt;code&gt;&#039;move&#039;&lt;/code&gt; (elements moved) or &lt;code&gt;&#039;serialize&#039;&lt;/code&gt; (form is being submitted).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;attach&lt;/code&gt; (and &lt;code&gt;detach&lt;/code&gt;) functions of a behavior can be used multiple time over the same portion of the DOM tree.
So the same element could be processed multiple time by the same code. It is up to the code itself to avoid processing
(ie. binding event handlers, altering CSS styles, etc.) multiple times for the same elements. The easiest solution for
this is to use the &lt;a href=&quot;http://plugins.jquery.com/once/&quot;&gt;jQuery Once&lt;/a&gt; plugin (which
&lt;a href=&quot;http://drupal.org/node/756722#jquery-once&quot;&gt;is provided by Drupal 7&lt;/a&gt;) like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$(selector).once(&#039;behavior-name&#039;).doSomething();
$(selector).once(&#039;behavior-name&#039;, function(){ /*do something*/ });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since a behavior is being attached/detached to/from a context, the context object can be used to restrict your jQuery
queries to only the affected element or DOM subtree, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$(selector, context).doSomething();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Putting all this together means the base pattern to process elements on page load should looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;(function($) {
  Drupal.behaviors.doSomething = {
    attach: function(context, settings) {
      $(&#039;div.something&#039;, context).once(&#039;do-something&#039;).doSomething({
        param1: settings.somethingl.param,
        param2: &#039;something else&#039;
      });
    }
  }
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://drupal.org/node/756722&quot;&gt;Managing JavaScript in Drupal 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drupal.org/node/121997&quot;&gt;Working with JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://drupal.org/update/modules/6/7#drupal_behaviors&quot;&gt;Converting 6.x modules to 7.x - Changed Drupal.behaviors to objects having the properties &#039;attach&#039; and &#039;detach&#039;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.drupal.org/api/drupal/includes!common.inc/function/drupal_add_js/7&quot;&gt;http://api.drupal.org/api/drupal/includes!common.inc/function/drupal_add_js/7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://plugins.jquery.com/once/&quot;&gt;jQuery Once&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Mon, 18 Nov 2013 00:00:00 -0500</pubDate>
            <link>http://pbuyle.github.io/blog/2013/11/18/javascript-jquery-domready-drupal-7</link>
            <guid isPermaLink="true">http://pbuyle.github.io/blog/2013/11/18/javascript-jquery-domready-drupal-7</guid>
                                    <category domain="http://pbuyle.github.io/blog/tags">>drupal</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>drupal-7</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>javascript</category>
                        <category domain="http://pbuyle.github.io/blog/tags">>jquery</category>
                    </item>
                                    </channel>
</rss>